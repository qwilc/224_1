00000000: 00100011 01101001 01101110 01100011 01101100 01110101  #inclu
00000006: 01100100 01100101 00100000 00111100 01110011 01110100  de <st
0000000c: 01100100 01101001 01101111 00101110 01101000 00111110  dio.h>
00000012: 00001010 00100011 01101001 01101110 01100011 01101100  .#incl
00000018: 01110101 01100100 01100101 00100000 00111100 01110011  ude <s
0000001e: 01110100 01100100 01101100 01101001 01100010 00101110  tdlib.
00000024: 01101000 00111110 00001010 00100011 01101001 01101110  h>.#in
0000002a: 01100011 01101100 01110101 01100100 01100101 00100000  clude 
00000030: 00111100 01110011 01110100 01110010 01101001 01101110  <strin
00000036: 01100111 00101110 01101000 00111110 00001010 00001010  g.h>..
0000003c: 00100011 01100100 01100101 01100110 01101001 01101110  #defin
00000042: 01100101 00100000 01010100 01010010 01010101 01000101  e TRUE
00000048: 00100000 00110001 00001010 00100011 01100100 01100101   1.#de
0000004e: 01100110 01101001 01101110 01100101 00100000 01000110  fine F
00000054: 01000001 01001100 01010011 01000101 00100000 00110000  ALSE 0
0000005a: 00001010 00100011 01100100 01100101 01100110 01101001  .#defi
00000060: 01101110 01100101 00100000 01000010 01000001 01000100  ne BAD
00000066: 01011111 01001110 01010101 01001101 01000010 01000101  _NUMBE
0000006c: 01010010 01011111 01000001 01010010 01000111 01010011  R_ARGS
00000072: 00100000 00110001 00001010 00001010 00101111 00101010   1../*
00000078: 00101010 00001010 00100000 00101010 00100000 01010000  *. * P
0000007e: 01100001 01110010 01110011 01100101 01110011 00100000  arses 
00000084: 01110100 01101000 01100101 00100000 01100011 01101111  the co
0000008a: 01101101 01101101 01100001 01101110 01100100 00100000  mmand 
00000090: 01101100 01101001 01101110 01100101 00101110 00001010  line..
00000096: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
0000009c: 01100001 01110010 01100111 01100011 00111010 00100000  argc: 
000000a2: 01110100 01101000 01100101 00100000 01101110 01110101  the nu
000000a8: 01101101 01100010 01100101 01110010 00100000 01101111  mber o
000000ae: 01100110 00100000 01101001 01110100 01100101 01101101  f item
000000b4: 01110011 00100000 01101111 01101110 00100000 01110100  s on t
000000ba: 01101000 01100101 00100000 01100011 01101111 01101101  he com
000000c0: 01101101 01100001 01101110 01100100 00100000 01101100  mand l
000000c6: 01101001 01101110 01100101 00100000 00101000 01100001  ine (a
000000cc: 01101110 01100100 00100000 01101100 01100101 01101110  nd len
000000d2: 01100111 01110100 01101000 00100000 01101111 01100110  gth of
000000d8: 00100000 01110100 01101000 01100101 00001010 00100000   the. 
000000de: 00101010 00100000 00100000 00100000 00100000 00100000  *     
000000e4: 00100000 00100000 01100001 01110010 01100111 01110110    argv
000000ea: 00100000 01100001 01110010 01110010 01100001 01111001   array
000000f0: 00101001 00100000 01101001 01101110 01100011 01101100  ) incl
000000f6: 01110101 01100100 01101001 01101110 01100111 00100000  uding 
000000fc: 01110100 01101000 01100101 00100000 01100101 01111000  the ex
00000102: 01100101 01100011 01110101 01110100 01100001 01100010  ecutab
00000108: 01101100 01100101 00001010 00100000 00101010 00100000  le. * 
0000010e: 01100001 01110010 01100111 01110110 00111010 00100000  argv: 
00000114: 01110100 01101000 01100101 00100000 01100001 01110010  the ar
0000011a: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
00000120: 00100000 01100001 01110010 01100111 01110101 01101101   argum
00000126: 01100101 01101110 01110100 01110011 00100000 01100001  ents a
0000012c: 01110011 00100000 01110011 01110100 01110010 01101001  s stri
00000132: 01101110 01100111 01110011 00100000 00101000 01100011  ngs (c
00000138: 01101000 01100001 01110010 00101010 00100000 01100001  har* a
0000013e: 01110010 01110010 01100001 01111001 00101001 00001010  rray).
00000144: 00100000 00101010 00100000 01100010 01101001 01110100   * bit
0000014a: 01110011 00111010 00100000 01110100 01101000 01100101  s: the
00000150: 00100000 01101001 01101110 01110100 01100101 01100111   integ
00000156: 01100101 01110010 00100000 01110110 01100001 01101100  er val
0000015c: 01110101 01100101 00100000 01101001 01110011 00100000  ue is 
00000162: 01110011 01100101 01110100 00100000 01110100 01101111  set to
00000168: 00100000 01010100 01010010 01010101 01000101 00100000   TRUE 
0000016e: 01101001 01100110 00100000 01100010 01101001 01110100  if bit
00000174: 01110011 00100000 01101111 01110101 01110100 01110000  s outp
0000017a: 01110101 01110100 00100000 01101001 01101110 01100100  ut ind
00000180: 01101001 01100011 01100001 01110100 01100101 01100100  icated
00000186: 00001010 00100000 00101010 00100000 00100000 00100000  . *   
0000018c: 00100000 00100000 00100000 00100000 01101111 01110101      ou
00000192: 01110100 01101000 01100101 01110010 01110111 01101001  therwi
00000198: 01110011 01100101 00100000 01000110 01000001 01001100  se FAL
0000019e: 01010011 01000101 00100000 01100110 01101111 01110010  SE for
000001a4: 00100000 01101000 01100101 01111000 00100000 01101111   hex o
000001aa: 01110101 01110100 01110000 01110101 01110100 00001010  utput.
000001b0: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
000001b6: 01110010 01100101 01110100 01110101 01110010 01101110  return
000001bc: 01110011 00100000 01110100 01101000 01100101 00100000  s the 
000001c2: 01101001 01101110 01110000 01110101 01110100 00100000  input 
000001c8: 01100110 01101001 01101100 01100101 00100000 01110000  file p
000001ce: 01101111 01101001 01101110 01110100 01100101 01110010  ointer
000001d4: 00100000 00101000 01000110 01001001 01001100 01000101   (FILE
000001da: 00101010 00101001 00001010 00100000 00101010 00101010  *). **
000001e0: 00101111 00001010 01000110 01001001 01001100 01000101  /.FILE
000001e6: 00100000 00101010 01110000 01100001 01110010 01110011   *pars
000001ec: 01100101 01000011 01101111 01101101 01101101 01100001  eComma
000001f2: 01101110 01100100 01001100 01101001 01101110 01100101  ndLine
000001f8: 00101000 01101001 01101110 01110100 00100000 01100001  (int a
000001fe: 01110010 01100111 01100011 00101100 00100000 01100011  rgc, c
00000204: 01101000 01100001 01110010 00100000 00101010 00101010  har **
0000020a: 01100001 01110010 01100111 01110110 00101100 00100000  argv, 
00000210: 01101001 01101110 01110100 00100000 00101010 01100010  int *b
00000216: 01101001 01110100 01110011 00101001 00100000 01111011  its) {
0000021c: 00001010 00100000 00100000 01101001 01100110 00100000  .  if 
00000222: 00101000 01100001 01110010 01100111 01100011 00100000  (argc 
00000228: 00111110 00100000 00110010 00101001 00100000 01111011  > 2) {
0000022e: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000234: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
0000023a: 00100010 01010101 01110011 01100001 01100111 01100101  "Usage
00000240: 00111010 00100000 00100101 01110011 00100000 01011011  : %s [
00000246: 00101101 01100010 01111100 00101101 01100010 01101001  -b|-bi
0000024c: 01110100 01110011 01011101 01011100 01101110 00100010  ts]\n"
00000252: 00101100 00100000 01100001 01110010 01100111 01110110  , argv
00000258: 01011011 00110000 01011101 00101001 00111011 00001010  [0]);.
0000025e: 00100000 00100000 00100000 00100000 01100101 01111000      ex
00000264: 01101001 01110100 00101000 01000010 01000001 01000100  it(BAD
0000026a: 01011111 01001110 01010101 01001101 01000010 01000101  _NUMBE
00000270: 01010010 01011111 01000001 01010010 01000111 01010011  R_ARGS
00000276: 00101001 00111011 00001010 00100000 00100000 01111101  );.  }
0000027c: 00001010 00001010 00100000 00100000 01101001 01100110  ..  if
00000282: 00100000 00101000 01100001 01110010 01100111 01100011   (argc
00000288: 00100000 00111101 00111101 00100000 00110010 00100000   == 2 
0000028e: 00100110 00100110 00001010 00100000 00100000 00100000  &&.   
00000294: 00100000 00100000 00100000 00101000 01110011 01110100     (st
0000029a: 01110010 01100011 01101101 01110000 00101000 01100001  rcmp(a
000002a0: 01110010 01100111 01110110 01011011 00110001 01011101  rgv[1]
000002a6: 00101100 00100000 00100010 00101101 01100010 00100010  , "-b"
000002ac: 00101001 00100000 00111101 00111101 00100000 00110000  ) == 0
000002b2: 00100000 01111100 01111100 00100000 01110011 01110100   || st
000002b8: 01110010 01100011 01101101 01110000 00101000 01100001  rcmp(a
000002be: 01110010 01100111 01110110 01011011 00110001 01011101  rgv[1]
000002c4: 00101100 00100000 00100010 00101101 01100010 01101001  , "-bi
000002ca: 01110100 01110011 00100010 00101001 00100000 00111101  ts") =
000002d0: 00111101 00100000 00110000 00101001 00101001 00100000  = 0)) 
000002d6: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
000002dc: 00101010 01100010 01101001 01110100 01110011 00100000  *bits 
000002e2: 00111101 00100000 01010100 01010010 01010101 01000101  = TRUE
000002e8: 00111011 00001010 00100000 00100000 01111101 00100000  ;.  } 
000002ee: 01100101 01101100 01110011 01100101 00100000 01111011  else {
000002f4: 00001010 00100000 00100000 00100000 00100000 00101010  .    *
000002fa: 01100010 01101001 01110100 01110011 00100000 00111101  bits =
00000300: 00100000 01000110 01000001 01001100 01010011 01000101   FALSE
00000306: 00111011 00001010 00100000 00100000 01111101 00001010  ;.  }.
0000030c: 00001010 00100000 00100000 01110010 01100101 01110100  .  ret
00000312: 01110101 01110010 01101110 00100000 01110011 01110100  urn st
00000318: 01100100 01101001 01101110 00111011 00001010 01111101  din;.}
0000031e: 00001010 00001010 00101111 00101010 00101010 00001010  ../**.
00000324: 00100000 00101010 00100000 01010111 01110010 01101001   * Wri
0000032a: 01110100 01100101 01110011 00100000 01100100 01100001  tes da
00000330: 01110100 01100001 00100000 01110100 01101111 00100000  ta to 
00000336: 01110011 01110100 01100100 01101111 01110101 01110100  stdout
0000033c: 00100000 01101001 01101110 00100000 01101000 01100101   in he
00000342: 01111000 01100001 01100100 01100101 01100011 01101001  xadeci
00000348: 01101101 01100001 01101100 00101110 00001010 00100000  mal.. 
0000034e: 00101010 00001010 00100000 00101010 00100000 01010011  *. * S
00000354: 01100101 01100101 00100000 01101101 01111001 01111000  ee myx
0000035a: 01111000 01100100 00101110 01101101 01100100 00100000  xd.md 
00000360: 01100110 01101111 01110010 00100000 01100100 01100101  for de
00000366: 01110100 01100001 01101001 01101100 01110011 00101110  tails.
0000036c: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
00000372: 00100000 01100100 01100001 01110100 01100001 00111010   data:
00000378: 00100000 01100001 01101110 00100000 01100001 01110010   an ar
0000037e: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
00000384: 00100000 01101110 01101111 00100000 01101101 01101111   no mo
0000038a: 01110010 01100101 00100000 01110100 01101000 01100001  re tha
00000390: 01101110 00100000 00110001 00110110 00100000 01100011  n 16 c
00000396: 01101000 01100001 01110010 01100001 01100011 01110100  haract
0000039c: 01100101 01110010 01110011 00001010 00100000 00101010  ers. *
000003a2: 00100000 01110011 01101001 01111010 01100101 00111010   size:
000003a8: 00100000 01110100 01101000 01100101 00100000 01110011   the s
000003ae: 01101001 01111010 01100101 00100000 01101111 01100110  ize of
000003b4: 00100000 01110100 01101000 01100101 00100000 01100001   the a
000003ba: 01110010 01110010 01100001 01111001 00001010 00100000  rray. 
000003c0: 00101010 00101010 00101111 00001010 01110110 01101111  **/.vo
000003c6: 01101001 01100100 00100000 01110000 01110010 01101001  id pri
000003cc: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
000003d2: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
000003d8: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
000003de: 01100101 01100100 00100000 01100011 01101000 01100001  ed cha
000003e4: 01110010 00100000 00101010 01100100 01100001 01110100  r *dat
000003ea: 01100001 00101100 00100000 01110011 01101001 01111010  a, siz
000003f0: 01100101 01011111 01110100 00100000 01110011 01101001  e_t si
000003f6: 01111010 01100101 00101001 00100000 01111011 00001010  ze) {.
000003fc: 00100000 00100000 01100110 01101111 01110010 00101000    for(
00000402: 01110011 01101001 01111010 01100101 01011111 01110100  size_t
00000408: 00100000 01101001 00100000 00111101 00100000 00110000   i = 0
0000040e: 00111011 00100000 01101001 00100000 00111100 00100000  ; i < 
00000414: 01110011 01101001 01111010 01100101 00111011 00100000  size; 
0000041a: 01101001 00101011 00101011 00101001 00100000 01111011  i++) {
00000420: 00001010 00100000 00100000 00100000 00100000 00100000  .     
00000426: 00100000 00101111 00101111 01110000 01110010 01101001   //pri
0000042c: 01101110 01110100 01100110 00101000 00100010 01001001  ntf("I
00000432: 01101110 00100000 01000110 01101111 01110010 00100000  n For 
00000438: 01001100 01101111 01101111 01110000 00101100 00100000  Loop, 
0000043e: 01101001 00100000 00111101 00100000 00100101 01101100  i = %l
00000444: 01101001 00101100 00100000 01100100 01100001 01110100  i, dat
0000044a: 01100001 01011011 01101001 01011101 00100000 00111101  a[i] =
00000450: 00100000 00100101 01100011 00100010 00101100 00100000   %c", 
00000456: 01101001 00101100 00100000 01100100 01100001 01110100  i, dat
0000045c: 01100001 01011011 01101001 01011101 00101001 00111011  a[i]);
00000462: 00001010 00001010 00001001 00001001 01101001 01100110  ....if
00000468: 00101000 01101001 00100000 00100101 00100000 00110010  (i % 2
0000046e: 00100000 00111101 00111101 00100000 00110000 00101001   == 0)
00000474: 00100000 01111011 00001010 00001001 00001001 00001001   {....
0000047a: 01110000 01110010 01101001 01101110 01110100 01100110  printf
00000480: 00101000 00100010 00100000 00100010 00101001 00111011  (" ");
00000486: 00001010 00001001 00001001 01111101 00001010 00001010  ...}..
0000048c: 00100000 00100000 00100000 00100000 00100000 00100000        
00000492: 01110000 01110010 01101001 01101110 01110100 01100110  printf
00000498: 00101000 00100010 00100101 00110000 00110010 01111000  ("%02x
0000049e: 00100010 00101100 00100000 01100100 01100001 01110100  ", dat
000004a4: 01100001 01011011 01101001 01011101 00101001 00111011  a[i]);
000004aa: 00001010 00100000 00100000 01111101 00001010 00001010  .  }..
000004b0: 00100000 00100000 01110101 01101110 01110011 01101001    unsi
000004b6: 01100111 01101110 01100101 01100100 00100000 01101001  gned i
000004bc: 01101110 01110100 00100000 01110000 01100001 01100100  nt pad
000004c2: 01100100 01101001 01101110 01100111 00100000 00111101  ding =
000004c8: 00100000 00110100 00110000 00100000 00101101 00100000   40 - 
000004ce: 00101000 01101001 01101110 01110100 00101001 00101000  (int)(
000004d4: 00110010 00100000 00101010 00100000 01110011 01101001  2 * si
000004da: 01111010 01100101 00100000 00101011 00100000 00101000  ze + (
000004e0: 01110011 01101001 01111010 01100101 00101111 00110010  size/2
000004e6: 00101110 00110000 00100000 00101011 00100000 00110000  .0 + 0
000004ec: 00101110 00110101 00101001 00101001 00111011 00100000  .5)); 
000004f2: 00101111 00101111 01010100 01001111 01000100 01001111  //TODO
000004f8: 00111010 00100000 01000110 01101001 01111000 00100000  : Fix 
000004fe: 01110100 01101000 01100101 00100000 01110000 01100001  the pa
00000504: 01100100 01100100 01101001 01101110 01100111 00001010  dding.
0000050a: 00001010 00100000 00100000 00100000 01100110 01101111  .   fo
00000510: 01110010 00101000 01101001 01101110 01110100 00100000  r(int 
00000516: 01101001 00100000 00111101 00100000 00110000 00111011  i = 0;
0000051c: 00100000 01101001 00100000 00111100 00100000 01110000   i < p
00000522: 01100001 01100100 01100100 01101001 01101110 01100111  adding
00000528: 00111011 00100000 01101001 00101011 00101011 00101001  ; i++)
0000052e: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
00000534: 00100000 00100000 00100000 01110000 01110010 01101001     pri
0000053a: 01101110 01110100 01100110 00101000 00100010 00100000  ntf(" 
00000540: 00100010 00101001 00111011 00001010 00100000 00100000  ");.  
00000546: 00100000 01111101 00001001 00001010 01111101 00001010   }..}.
0000054c: 00001010 00101111 00101010 00101010 00001010 00100000  ./**. 
00000552: 00101010 00100000 01010111 01110010 01101001 01110100  * Writ
00000558: 01100101 01110011 00100000 01100100 01100001 01110100  es dat
0000055e: 01100001 00100000 01110100 01101111 00100000 01110011  a to s
00000564: 01110100 01100100 01101111 01110101 01110100 00100000  tdout 
0000056a: 01100001 01110011 00100000 01100011 01101000 01100001  as cha
00000570: 01110010 01100001 01100011 01110100 01100101 01110010  racter
00000576: 01110011 00101110 00001010 00100000 00101010 00001010  s.. *.
0000057c: 00100000 00101010 00100000 01010011 01100101 01100101   * See
00000582: 00100000 01101101 01111001 01111000 01111000 01100100   myxxd
00000588: 00101110 01101101 01100100 00100000 01100110 01101111  .md fo
0000058e: 01110010 00100000 01100100 01100101 01110100 01100001  r deta
00000594: 01101001 01101100 01110011 00101110 00001010 00100000  ils.. 
0000059a: 00101010 00001010 00100000 00101010 00100000 01100100  *. * d
000005a0: 01100001 01110100 01100001 00111010 00100000 01100001  ata: a
000005a6: 01101110 00100000 01100001 01110010 01110010 01100001  n arra
000005ac: 01111001 00100000 01101111 01100110 00100000 01101110  y of n
000005b2: 01101111 00100000 01101101 01101111 01110010 01100101  o more
000005b8: 00100000 01110100 01101000 01100001 01101110 00100000   than 
000005be: 00110001 00110110 00100000 01100011 01101000 01100001  16 cha
000005c4: 01110010 01100001 01100011 01110100 01100101 01110010  racter
000005ca: 01110011 00001010 00100000 00101010 00100000 01110011  s. * s
000005d0: 01101001 01111010 01100101 00111010 00100000 01110100  ize: t
000005d6: 01101000 01100101 00100000 01110011 01101001 01111010  he siz
000005dc: 01100101 00100000 01101111 01100110 00100000 01110100  e of t
000005e2: 01101000 01100101 00100000 01100001 01110010 01110010  he arr
000005e8: 01100001 01111001 00001010 00100000 00101010 00101010  ay. **
000005ee: 00101111 00001010 01110110 01101111 01101001 01100100  /.void
000005f4: 00100000 01110000 01110010 01101001 01101110 01110100   print
000005fa: 01000100 01100001 01110100 01100001 01000001 01110011  DataAs
00000600: 01000011 01101000 01100001 01110010 01110011 00101000  Chars(
00000606: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
0000060c: 01100101 01100100 00100000 01100011 01101000 01100001  ed cha
00000612: 01110010 00100000 00101010 01100100 01100001 01110100  r *dat
00000618: 01100001 00101100 00100000 01110011 01101001 01111010  a, siz
0000061e: 01100101 01011111 01110100 00100000 01110011 01101001  e_t si
00000624: 01111010 01100101 00101001 00100000 01111011 00001010  ze) {.
0000062a: 00100000 00100000 00100000 00100000 01100110 01101111      fo
00000630: 01110010 00101000 01110011 01101001 01111010 01100101  r(size
00000636: 01011111 01110100 00100000 01101001 00100000 00111101  _t i =
0000063c: 00100000 00110000 00111011 00100000 01101001 00100000   0; i 
00000642: 00111100 00100000 01110011 01101001 01111010 01100101  < size
00000648: 00111011 00100000 01101001 00101011 00101011 00101001  ; i++)
0000064e: 00100000 01111011 00001010 00001010 00001001 00001001   {....
00000654: 00001001 01101001 01100110 00101000 01100100 01100001  .if(da
0000065a: 01110100 01100001 01011011 01101001 01011101 00100000  ta[i] 
00000660: 00111100 00100000 00110011 00110010 00100000 01111100  < 32 |
00000666: 01111100 00100000 01100100 01100001 01110100 01100001  | data
0000066c: 01011011 01101001 01011101 00100000 00111110 00100000  [i] > 
00000672: 00110001 00110010 00110110 00101001 00100000 01111011  126) {
00000678: 00001010 00001001 00001001 00001001 00001001 01110000  .....p
0000067e: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
00000684: 00100010 00101110 00100010 00101001 00111011 00001010  ".");.
0000068a: 00001001 00001001 00001001 01111101 00001010 00001001  ...}..
00000690: 00001001 00001001 01100101 01101100 01110011 01100101  ..else
00000696: 00100000 01111011 00001010 00001001 00001001 00001001   {....
0000069c: 00001001 01110000 01110010 01101001 01101110 01110100  .print
000006a2: 01100110 00101000 00100010 00100101 01100011 00100010  f("%c"
000006a8: 00101100 00100000 01100100 01100001 01110100 01100001  , data
000006ae: 01011011 01101001 01011101 00101001 00111011 00001010  [i]);.
000006b4: 00001001 00001001 00001001 01111101 00001010 00100000  ...}. 
000006ba: 00100000 00100000 00100000 01111101 00001010 01111101     }.}
000006c0: 00001010 00001010 01110110 01101111 01101001 01100100  ..void
000006c6: 00100000 01110010 01100101 01100001 01100100 01000001   readA
000006cc: 01101110 01100100 01010000 01110010 01101001 01101110  ndPrin
000006d2: 01110100 01001001 01101110 01110000 01110101 01110100  tInput
000006d8: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
000006de: 01000110 01001001 01001100 01000101 00100000 00101010  FILE *
000006e4: 01101001 01101110 01110000 01110101 01110100 00101001  input)
000006ea: 00100000 01111011 00001010 00100000 00100000 01110101   {.  u
000006f0: 01101110 01110011 01101001 01100111 01101110 01100101  nsigne
000006f6: 01100100 00100000 01100011 01101000 01100001 01110010  d char
000006fc: 00100000 01100100 01100001 01110100 01100001 01011011   data[
00000702: 00110001 00110110 01011101 00111011 00001010 00100000  16];. 
00000708: 00100000 01101001 01101110 01110100 00100000 01101110   int n
0000070e: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000714: 01110011 01010010 01100101 01100001 01100100 00100000  sRead 
0000071a: 00111101 00100000 01100110 01110010 01100101 01100001  = frea
00000720: 01100100 00101000 01100100 01100001 01110100 01100001  d(data
00000726: 00101100 00100000 00110001 00101100 00100000 00110001  , 1, 1
0000072c: 00110110 00101100 00100000 01101001 01101110 01110000  6, inp
00000732: 01110101 01110100 00101001 00111011 00001010 00100000  ut);. 
00000738: 00100000 01110101 01101110 01110011 01101001 01100111   unsig
0000073e: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
00000744: 01110100 00100000 01101111 01100110 01100110 01110011  t offs
0000074a: 01100101 01110100 00100000 00111101 00100000 00110000  et = 0
00000750: 00111011 00001010 00100000 00100000 01110111 01101000  ;.  wh
00000756: 01101001 01101100 01100101 00100000 00101000 01101110  ile (n
0000075c: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000762: 01110011 01010010 01100101 01100001 01100100 00100000  sRead 
00000768: 00100001 00111101 00100000 00110000 00101001 00100000  != 0) 
0000076e: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
00000774: 01110000 01110010 01101001 01101110 01110100 01100110  printf
0000077a: 00101000 00100010 00100101 00110000 00111000 01111000  ("%08x
00000780: 00111010 00100010 00101100 00100000 01101111 01100110  :", of
00000786: 01100110 01110011 01100101 01110100 00101001 00111011  fset);
0000078c: 00001010 00100000 00100000 00100000 00100000 01101111  .    o
00000792: 01100110 01100110 01110011 01100101 01110100 00100000  ffset 
00000798: 00101011 00111101 00100000 01101110 01110101 01101101  += num
0000079e: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
000007a4: 01100101 01100001 01100100 00111011 00001010 00100000  ead;. 
000007aa: 00100000 00100000 00100000 01110000 01110010 01101001     pri
000007b0: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
000007b6: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
000007bc: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
000007c2: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
000007c8: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
000007ce: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
000007d4: 00100000 01110000 01110010 01101001 01101110 01110100   print
000007da: 01100110 00101000 00100010 00100000 00100000 00100010  f("  "
000007e0: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
000007e6: 00100000 01110000 01110010 01101001 01101110 01110100   print
000007ec: 01000100 01100001 01110100 01100001 01000001 01110011  DataAs
000007f2: 01000011 01101000 01100001 01110010 01110011 00101000  Chars(
000007f8: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
000007fe: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
00000804: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
0000080a: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000810: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000816: 01100110 00101000 00100010 01011100 01101110 00100010  f("\n"
0000081c: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000822: 00100000 01101110 01110101 01101101 01000010 01111001   numBy
00000828: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
0000082e: 01100100 00100000 00111101 00100000 01100110 01110010  d = fr
00000834: 01100101 01100001 01100100 00101000 01100100 01100001  ead(da
0000083a: 01110100 01100001 00101100 00100000 00110001 00101100  ta, 1,
00000840: 00100000 00110001 00110110 00101100 00100000 01101001   16, i
00000846: 01101110 01110000 01110101 01110100 00101001 00111011  nput);
0000084c: 00001010 00100000 00100000 01111101 00001010 01111101  .  }.}
00000852: 00001010 00001010 01110110 01101111 01101001 01100100  ..void
00000858: 00100000 01110000 01110010 01101001 01101110 01110100   print
0000085e: 01000100 01100001 01110100 01100001 01000001 01110011  DataAs
00000864: 01000010 01101001 01110100 01110011 00101000 01110101  Bits(u
0000086a: 01101110 01110011 01101001 01100111 01101110 01100101  nsigne
00000870: 01100100 00100000 01100011 01101000 01100001 01110010  d char
00000876: 00100000 00101010 01100100 01100001 01110100 01100001   *data
0000087c: 00101100 00100000 01110011 01101001 01111010 01100101  , size
00000882: 01011111 01110100 00100000 01110011 01101001 01111010  _t siz
00000888: 01100101 00101001 00100000 01111011 00001010 00100000  e) {. 
0000088e: 00100000 01100110 01101111 01110010 00101000 01110011   for(s
00000894: 01101001 01111010 01100101 01011111 01110100 00100000  ize_t 
0000089a: 01101001 00100000 00111101 00100000 00110000 00111011  i = 0;
000008a0: 00100000 01101001 00100000 00111100 00100000 01110011   i < s
000008a6: 01101001 01111010 01100101 00111011 00100000 01101001  ize; i
000008ac: 00101011 00101011 00101001 00100000 01111011 00001010  ++) {.
000008b2: 00001001 00001001 00101111 00101111 01110000 01110010  ..//pr
000008b8: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
000008be: 01001001 01101110 00100000 01000110 01101111 01110010  In For
000008c4: 00100000 01001100 01101111 01101111 01110000 00101100   Loop,
000008ca: 00100000 01101001 00100000 00111101 00100000 00100101   i = %
000008d0: 01101100 01101001 00101100 00100000 01100100 01100001  li, da
000008d6: 01110100 01100001 01011011 01101001 01011101 00100000  ta[i] 
000008dc: 00111101 00100000 00100101 01100011 00100010 00101100  = %c",
000008e2: 00100000 01101001 00101100 00100000 01100100 01100001   i, da
000008e8: 01110100 01100001 01011011 01101001 01011101 00101001  ta[i])
000008ee: 00111011 00001010 00001010 00001001 00001001 01110000  ;....p
000008f4: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
000008fa: 00100010 00100000 00100010 00101001 00111011 00001010  " ");.
00000900: 00001010 00001001 00001001 01101001 01101110 01110100  ...int
00000906: 00100000 01100010 01101001 01101110 01100001 01110010   binar
0000090c: 01111001 01011011 00111000 01011101 00111011 00001010  y[8];.
00000912: 00001001 00001001 01101001 01101110 01110100 00100000  ..int 
00000918: 01100011 01110101 01110010 01110010 01100101 01101110  curren
0000091e: 01110100 01000011 01101000 01100001 01110010 00100000  tChar 
00000924: 00111101 00100000 01100100 01100001 01110100 01100001  = data
0000092a: 01011011 01101001 01011101 00111011 00001010 00001010  [i];..
00000930: 00001001 00001001 01100110 01101111 01110010 00101000  ..for(
00000936: 01101001 01101110 01110100 00100000 01101001 00100000  int i 
0000093c: 00111101 00100000 00110111 00111011 00100000 01101001  = 7; i
00000942: 00100000 00111110 00111101 00100000 00110000 00111011   >= 0;
00000948: 00100000 01101001 00101101 00101101 00101001 00100000   i--) 
0000094e: 01111011 00001010 00001001 00001001 00001001 01100010  {....b
00000954: 01101001 01101110 01100001 01110010 01111001 01011011  inary[
0000095a: 01101001 01011101 00100000 00111101 00100000 01100011  i] = c
00000960: 01110101 01110010 01110010 01100101 01101110 01110100  urrent
00000966: 01000011 01101000 01100001 01110010 00100101 00110010  Char%2
0000096c: 00111011 00001010 00001001 00001001 00001001 01100011  ;....c
00000972: 01110101 01110010 01110010 01100101 01101110 01110100  urrent
00000978: 01000011 01101000 01100001 01110010 00100000 00101111  Char /
0000097e: 00111101 00100000 00110010 00111011 00001010 00001001  = 2;..
00000984: 00001001 01111101 00001010 00001010 00001001 00001001  .}....
0000098a: 01100110 01101111 01110010 00101000 01101001 01101110  for(in
00000990: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
00000996: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
0000099c: 00100000 00111000 00111011 00100000 01101001 00101011   8; i+
000009a2: 00101011 00101001 00100000 01111011 00001010 00001001  +) {..
000009a8: 00001001 00001001 01110000 01110010 01101001 01101110  ..prin
000009ae: 01110100 01100110 00101000 00100010 00100101 01101001  tf("%i
000009b4: 00100010 00101100 00100000 01100010 01101001 01101110  ", bin
000009ba: 01100001 01110010 01111001 01011011 01101001 01011101  ary[i]
000009c0: 00101001 00111011 00001010 00001001 00001001 01111101  );...}
000009c6: 00001001 00001010 00001001 01111101 00001010 00001010  ...}..
000009cc: 00001001 01110101 01101110 01110011 01101001 01100111  .unsig
000009d2: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
000009d8: 01110100 00100000 01110000 01100001 01100100 01100100  t padd
000009de: 01101001 01101110 01100111 00100000 00111101 00100000  ing = 
000009e4: 00110101 00110100 00100000 00101101 00100000 00101000  54 - (
000009ea: 00111001 00100000 00101010 00100000 01110011 01101001  9 * si
000009f0: 01111010 01100101 00101001 00111011 00001010 00001010  ze);..
000009f6: 00100000 00100000 01100110 01101111 01110010 00101000    for(
000009fc: 01101001 01101110 01110100 00100000 01101001 00100000  int i 
00000a02: 00111101 00100000 00110000 00111011 00100000 01101001  = 0; i
00000a08: 00100000 00111100 00100000 01110000 01100001 01100100   < pad
00000a0e: 01100100 01101001 01101110 01100111 00111011 00100000  ding; 
00000a14: 01101001 00101011 00101011 00101001 00100000 01111011  i++) {
00000a1a: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000a20: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
00000a26: 00100010 00100000 00100010 00101001 00111011 00001010  " ");.
00000a2c: 00100000 00100000 01111101 00001010 01111101 00001010    }.}.
00000a32: 00001010 00101111 00101010 00101010 00001010 00100000  ./**. 
00000a38: 00101010 00100000 01000010 01101001 01110100 01110011  * Bits
00000a3e: 00100000 01101111 01110101 01110100 01110000 01110101   outpu
00000a44: 01110100 00100000 01100110 01101111 01110010 00100000  t for 
00000a4a: 01111000 01111000 01100100 00101110 00001010 00100000  xxd.. 
00000a50: 00101010 00001010 00100000 00101010 00100000 01010011  *. * S
00000a56: 01100101 01100101 00100000 01101101 01111001 01111000  ee myx
00000a5c: 01111000 01100100 00101110 01101101 01100100 00100000  xd.md 
00000a62: 01100110 01101111 01110010 00100000 01100100 01100101  for de
00000a68: 01110100 01100001 01101001 01101100 01110011 00101110  tails.
00000a6e: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
00000a74: 00100000 01101001 01101110 01110000 01110101 01110100   input
00000a7a: 00111010 00100000 01101001 01101110 01110000 01110101  : inpu
00000a80: 01110100 00100000 01110011 01110100 01110010 01100101  t stre
00000a86: 01100001 01101101 00001010 00100000 00101010 00101010  am. **
00000a8c: 00101111 00001010 01110110 01101111 01101001 01100100  /.void
00000a92: 00100000 01110010 01100101 01100001 01100100 01000001   readA
00000a98: 01101110 01100100 01010000 01110010 01101001 01101110  ndPrin
00000a9e: 01110100 01001001 01101110 01110000 01110101 01110100  tInput
00000aa4: 01000001 01110011 01000010 01101001 01110100 01110011  AsBits
00000aaa: 00101000 01000110 01001001 01001100 01000101 00100000  (FILE 
00000ab0: 00101010 01101001 01101110 01110000 01110101 01110100  *input
00000ab6: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
00000abc: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
00000ac2: 01100101 01100100 00100000 01100011 01101000 01100001  ed cha
00000ac8: 01110010 00100000 01100100 01100001 01110100 01100001  r data
00000ace: 01011011 00110110 01011101 00111011 00001010 00100000  [6];. 
00000ad4: 00100000 01101001 01101110 01110100 00100000 01101110   int n
00000ada: 01110101 01101101 01000010 01111001 01110100 01100101  umByte
00000ae0: 01110011 01010010 01100101 01100001 01100100 00100000  sRead 
00000ae6: 00111101 00100000 01100110 01110010 01100101 01100001  = frea
00000aec: 01100100 00101000 01100100 01100001 01110100 01100001  d(data
00000af2: 00101100 00100000 00110001 00101100 00100000 00110110  , 1, 6
00000af8: 00101100 00100000 01101001 01101110 01110000 01110101  , inpu
00000afe: 01110100 00101001 00111011 00001010 00100000 00100000  t);.  
00000b04: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
00000b0a: 01100101 01100100 00100000 01101001 01101110 01110100  ed int
00000b10: 00100000 01101111 01100110 01100110 01110011 01100101   offse
00000b16: 01110100 00100000 00111101 00100000 00110000 00111011  t = 0;
00000b1c: 00001010 00100000 00100000 01110111 01101000 01101001  .  whi
00000b22: 01101100 01100101 00100000 00101000 01101110 01110101  le (nu
00000b28: 01101101 01000010 01111001 01110100 01100101 01110011  mBytes
00000b2e: 01010010 01100101 01100001 01100100 00100000 00100001  Read !
00000b34: 00111101 00100000 00110000 00101001 00100000 01111011  = 0) {
00000b3a: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000b40: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
00000b46: 00100010 00100101 00110000 00111000 01111000 00111010  "%08x:
00000b4c: 00100010 00101100 00100000 01101111 01100110 01100110  ", off
00000b52: 01110011 01100101 01110100 00101001 00111011 00001010  set);.
00000b58: 00100000 00100000 00100000 00100000 01101111 01100110      of
00000b5e: 01100110 01110011 01100101 01110100 00100000 00101011  fset +
00000b64: 00111101 00100000 01101110 01110101 01101101 01000010  = numB
00000b6a: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000b70: 01100001 01100100 00111011 00001010 00100000 00100000  ad;.  
00000b76: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000b7c: 01110100 01000100 01100001 01110100 01100001 01000001  tDataA
00000b82: 01110011 01000010 01101001 01110100 01110011 00101000  sBits(
00000b88: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
00000b8e: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
00000b94: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
00000b9a: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000ba0: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000ba6: 01100110 00101000 00100010 00100000 00100000 00100010  f("  "
00000bac: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000bb2: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000bb8: 01000100 01100001 01110100 01100001 01000001 01110011  DataAs
00000bbe: 01000011 01101000 01100001 01110010 01110011 00101000  Chars(
00000bc4: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
00000bca: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
00000bd0: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
00000bd6: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000bdc: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000be2: 01100110 00101000 00100010 01011100 01101110 00100010  f("\n"
00000be8: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000bee: 00100000 01101110 01110101 01101101 01000010 01111001   numBy
00000bf4: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
00000bfa: 01100100 00100000 00111101 00100000 01100110 01110010  d = fr
00000c00: 01100101 01100001 01100100 00101000 01100100 01100001  ead(da
00000c06: 01110100 01100001 00101100 00100000 00110001 00101100  ta, 1,
00000c0c: 00100000 00110001 00110110 00101100 00100000 01101001   16, i
00000c12: 01101110 01110000 01110101 01110100 00101001 00111011  nput);
00000c18: 00001010 00100000 00100000 01111101 00001010 01111101  .  }.}
00000c1e: 00001010 00001010 01101001 01101110 01110100 00100000  ..int 
00000c24: 01101101 01100001 01101001 01101110 00101000 01101001  main(i
00000c2a: 01101110 01110100 00100000 01100001 01110010 01100111  nt arg
00000c30: 01100011 00101100 00100000 01100011 01101000 01100001  c, cha
00000c36: 01110010 00100000 00101010 00101010 01100001 01110010  r **ar
00000c3c: 01100111 01110110 00101001 00100000 01111011 00001010  gv) {.
00000c42: 00100000 00100000 01101001 01101110 01110100 00100000    int 
00000c48: 01100010 01101001 01110100 01110011 00100000 00111101  bits =
00000c4e: 00100000 01000110 01000001 01001100 01010011 01000101   FALSE
00000c54: 00111011 00001010 00100000 00100000 01000110 01001001  ;.  FI
00000c5a: 01001100 01000101 00100000 00101010 01101001 01101110  LE *in
00000c60: 01110000 01110101 01110100 00100000 00111101 00100000  put = 
00000c66: 01110000 01100001 01110010 01110011 01100101 01000011  parseC
00000c6c: 01101111 01101101 01101101 01100001 01101110 01100100  ommand
00000c72: 01001100 01101001 01101110 01100101 00101000 01100001  Line(a
00000c78: 01110010 01100111 01100011 00101100 00100000 01100001  rgc, a
00000c7e: 01110010 01100111 01110110 00101100 00100000 00100110  rgv, &
00000c84: 01100010 01101001 01110100 01110011 00101001 00111011  bits);
00000c8a: 00001010 00001010 00100000 00100000 01101001 01100110  ..  if
00000c90: 00100000 00101000 01100010 01101001 01110100 01110011   (bits
00000c96: 00100000 00111101 00111101 00100000 01000110 01000001   == FA
00000c9c: 01001100 01010011 01000101 00101001 00100000 01111011  LSE) {
00000ca2: 00001010 00100000 00100000 00100000 00100000 01110010  .    r
00000ca8: 01100101 01100001 01100100 01000001 01101110 01100100  eadAnd
00000cae: 01010000 01110010 01101001 01101110 01110100 01001001  PrintI
00000cb4: 01101110 01110000 01110101 01110100 01000001 01110011  nputAs
00000cba: 01001000 01100101 01111000 00101000 01101001 01101110  Hex(in
00000cc0: 01110000 01110101 01110100 00101001 00111011 00001010  put);.
00000cc6: 00100000 00100000 01111101 00100000 01100101 01101100    } el
00000ccc: 01110011 01100101 00100000 01111011 00001010 00100000  se {. 
00000cd2: 00100000 00100000 00100000 01110010 01100101 01100001     rea
00000cd8: 01100100 01000001 01101110 01100100 01010000 01110010  dAndPr
00000cde: 01101001 01101110 01110100 01001001 01101110 01110000  intInp
00000ce4: 01110101 01110100 01000001 01110011 01000010 01101001  utAsBi
00000cea: 01110100 01110011 00101000 01101001 01101110 01110000  ts(inp
00000cf0: 01110101 01110100 00101001 00111011 00001010 00100000  ut);. 
00000cf6: 00100000 01111101 00001010 00100000 00100000 01110010   }.  r
00000cfc: 01100101 01110100 01110101 01110010 01101110 00100000  eturn 
00000d02: 00110000 00111011 00001010 01111101 00001010           0;.}.
